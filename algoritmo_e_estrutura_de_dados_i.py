# -*- coding: utf-8 -*-
"""Algoritmo e Estrutura de Dados I.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iCgPpXJcNKB6Q9vI8dZyUH9RnmQ7mJ7r

# Introdução à lógica de programação

**Conceitos Básicos: Entender o que é lógica de programação e sua importância** <br>

Lógica de Programação: É a base para escrever programas de computador. Envolve a criação de uma sequência de instruções que o computador pode seguir para resolver um problema ou realizar uma tarefa. <br>

**Importância**: A lógica de programação é essencial porque permite que você:<br>
**Resolva Problemas**: Decompõe problemas complexos em partes menores e mais gerenciáveis.<br>
**Automatize Tarefas**: Crie programas que executam tarefas repetitivas de forma eficiente.<br>
**Desenvolva Pensamento Crítico**: Melhora a capacidade de pensar de forma estruturada e lógica.<br>
**Comunique-se com o Computador**: Traduz ideias e soluções em uma linguagem que o computador pode entender e executar.

**Operadores Lógicos: AND, OR, NOT**<br>
<br>
**AND (E)**: Retorna verdadeiro se ambas as condições forem verdadeiras.
Exemplo: condição1 AND condição2 é verdadeiro se condição1 e condição2 forem verdadeiras.<br>

Tabela Verdade:<br>

true AND true = true

true AND false = false

false AND true = false

false AND false = false<br>
<br>

**OR (OU)**: Retorna verdadeiro se pelo menos uma das condições for verdadeira.
Exemplo: condição1 OR condição2 é verdadeiro se condição1 ou condição2 for verdadeira.<br>

Tabela Verdade:<br>
true OR true = true

true OR false = true

false OR true = true

false OR false = false<br>
<br>

**NOT (NÃO)**: Inverte o valor lógico da condição.
Exemplo: NOT condição é verdadeiro se condição for falsa.
Tabela Verdade:<br>
NOT true = false

NOT false = true

**Fluxo de Controle: Como controlar o fluxo de execução de um programa**<br>

**Estruturas de Decisão**: Permitem que o programa tome decisões com base em condições.<br>
<br>
**if**: Executa um bloco de código se a condição for verdadeira.

if condição:
        # código a ser executado se a condição for verdadeira

**else**: Executa um bloco de código se a condição do if for falsa.

if condição:
        # código a ser executado se a condição for verdadeira
    else:
        # código a ser executado se a condição for falsa

**Exemplo 1**: Verificar se um número está dentro de um intervalo.<br>
Queremos verificar se um número está entre 10 e 20 (inclusive).
"""

numero = 15

if numero >= 10 and numero <= 20:
    print("O número está dentro do intervalo.")
else:
    print("O número está fora do intervalo.")

#AND: Ambas as condições (numero >= 10 e numero <= 20) devem ser verdadeiras para que a mensagem "O número está dentro do intervalo." seja exibida.

"""**Exemplo 2:** Verificar se um número é par ou múltiplo de 5<br>
Queremos verificar se um número é par ou múltiplo de 5.
"""

numero = 10

if numero % 2 == 0 or numero % 5 == 0:
    print("O número é par ou múltiplo de 5.")
else:
    print("O número não é par nem múltiplo de 5.")

#OR: Pelo menos uma das condições (numero % 2 == 0 ou numero % 5 == 0) deve ser verdadeira para que a mensagem "O número é par ou múltiplo de 5." seja exibida.

"""**Exemplo 3**: Verificar se uma pessoa não é menor de idade
Queremos verificar se uma pessoa não é menor de idade (idade >= 18).

"""

idade = 17

if not (idade >= 18):
    print("A pessoa é menor de idade.")
else:
    print("A pessoa não é menor de idade.")

#NOT: Inverte a condição. Se idade >= 18 for falso, not (idade >= 18) será verdadeiro, e a mensagem "A pessoa é menor de idade." será exibida.

"""**Exemplo 4**: Verificar múltiplas condições
Queremos verificar se um número é positivo e par, ou negativo e ímpar.

"""

numero = -3

if (numero > 0 and numero % 2 == 0) or (numero < 0 and numero % 2 != 0):
    print("O número é positivo e par, ou negativo e ímpar.")
else:
    print("O número não atende às condições.")

#AND e OR: Combinação de operadores lógicos para verificar múltiplas condições. A mensagem "O número é positivo e par, ou negativo e ímpar." será exibida se uma das combinações de condições for verdadeira.

"""**elif**: Permite testar múltiplas condições

if condição1:
        # código a ser executado se condição1 for verdadeira
    elif condição2:
        # código a ser executado se condição2 for verdadeira
    else:
        # código a ser executado se nenhuma condição for verdadeira

**Estruturas de Repetição**: Permitem que o programa execute um bloco de código várias vezes.<br>

**for**: Itera sobre uma sequência (como uma lista ou um intervalo de números).

for i in range(5):
        # código a ser executado 5 vezes

**while**: Executa um bloco de código enquanto a condição for verdadeira.

while condição:
        # código a ser executado enquanto a condição for verdadeira

### Significado de Cada Símbolo

1. **`numero = -3`**
   - **`=`**: Operador de atribuição. Atribui o valor `-3` à variável `numero`.

2. **`if`**
   - Palavra-chave que inicia uma estrutura condicional. Verifica se a condição entre parênteses é verdadeira.

3. **`(numero > 0 and numero % 2 == 0) or (numero < 0 and numero % 2 != 0)`**
   - **`(` e `)`**: Parênteses usados para agrupar expressões e definir a ordem de avaliação.
   - **`numero > 0`**: Verifica se `numero` é maior que 0.
   - **`and`**: Operador lógico E. A condição à esquerda e à direita devem ser verdadeiras para que a expressão completa seja verdadeira.
   - **`numero % 2 == 0`**: Verifica se `numero` é par. O operador `%` calcula o resto da divisão de `numero` por 2, e `==` verifica se o resto é igual a 0.
   - **`or`**: Operador lógico OU. Pelo menos uma das condições à esquerda ou à direita deve ser verdadeira para que a expressão completa seja verdadeira.
   - **`numero < 0`**: Verifica se `numero` é menor que 0.
   - **`numero % 2 != 0`**: Verifica se `numero` é ímpar. O operador `%` calcula o resto da divisão de `numero` por 2, e `!=` verifica se o resto é diferente de 0.

4. **`print("O número é positivo e par, ou negativo e ímpar.")`**
   - **`print`**: Função que exibe a mensagem entre parênteses na tela.
   - **`"O número é positivo e par, ou negativo e ímpar."`**: String (texto) que será exibida se a condição do `if` for verdadeira.

5. **`else`**
   - Palavra-chave que define o bloco de código a ser executado se a condição do `if` for falsa.

6. **`print("O número não atende às condições.")`**
   - **`print`**: Função que exibe a mensagem entre parênteses na tela.
   - **`"O número não atende às condições."`**: String (texto) que será exibida se a condição do `if` for falsa.

### Resumo
- O código verifica se o número é positivo e par, ou negativo e ímpar.
- Se a condição for verdadeira, exibe "O número é positivo e par, ou negativo e ímpar."
- Caso contrário, exibe "O número não atende às condições."
"""